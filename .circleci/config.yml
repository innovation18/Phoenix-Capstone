version: 2.1
jobs:
  lint:
    docker:
      - image: python:3.7.3-stretch

    working_directory: ~/app

    steps:
      - checkout

      - run:
          name: INSTALL DEPENDENCIES
          command: |
            python3 -m venv phoenix
            . phoenix/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.8.0/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - run:
          name: RUN LINT
          command: |
            . phoenix/bin/activate
            make lint

  build-push-docker-image:
    docker:
      - image: cimg/python:3.10.1
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD

    working_directory: ~/app

    steps:
      - checkout

      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true

      - run:
          name: INSTALL DEPENDENCIES
          command: |
            python3 -m venv phoenix
            . phoenix/bin/activate

            make install

      - run:
          name: BUILD DOCKER IMAGE
          command: |

            . phoenix/bin/activate

            echo ""
            echo "Building Image Now..."
            docker build -t phoenix .

            echo ""
            echo "Check Image If Exists"
            docker images| grep phoenix

      - run:
          name: PUSH DOCKER IMAGE
          command: |
            . phoenix/bin/activate

            echo "USING CIRCLE WORKFLOW ID FOR VERSIONING"
            docker tag phoenix ${DOCKER_USER}/phoenix:${CIRCLE_WORKFLOW_ID:0:7}

            echo ""
            echo "LOGGING INTO DOCKER HUB"
            echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USER} --password-stdin

            echo ""
            echo "PUSH IMAGE TO DOCKER HUB"
            docker push ${DOCKER_USER}/phoenix:${CIRCLE_WORKFLOW_ID:0:7}

  create-eks-cluster:
    docker:
      - image: cimg/python:3.10.1
    steps:
      - checkout

      - run:
          name: INSTALL AWSCLI
          command: |

            pip3 install awscli

            aws --version

      - run:
          name: INSTALL EKSCTL
          command: |

            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

            eksctl version

      - run:
          name: INSTALL KUBECTL
          command: |

            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin

            kubectl version --client

      - run:
          name: CREATE KUBERNETES CLUSTER
          command: |

            echo "Check IF Already Exists"

            Cluster_ARN=`aws cloudformation list-exports --query "Exports[?Name=='eksctl-phoenix-cluster::ARN'].Value" --no-paginate --output text`

            if [ -z "$Cluster_ARN" ]
            then 

            echo "Does Not Exist - Creating One..."

            eksctl create cluster \
            --name phoenix \
            --region us-west-2 \
            --version 1.19 \
            --nodegroup-name phoenix-workers \
            --node-type t2.micro \
            --nodes 2 \
            --nodes-min 1 \
            --nodes-max 2 \


            else 
            echo "Already Exists Your Cluster"
            fi

  deploy-application:
    docker:
      - image: cimg/python:3.10.1
    steps:
      - checkout

      - run:
          name: INSTALL AWSCLI
          command: |

            pip3 install awscli

            aws --version

      - run:
          name: INSTALL EKSCTL
          command: |

            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

            eksctl version

      - run:
          name: INSTALL KUBECTL
          command: |

            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin

            kubectl version --client

      - run:
          name: INSTALL AWS IAM AUTHENTICATOR
          command: |

            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            aws-iam-authenticator version

      - run:
          name: DEPLOY APP
          command: |

            echo "Check IF Already Exists"

            Cluster_ARN=`aws cloudformation list-exports --query "Exports[?Name=='eksctl-phoenix-cluster::ARN'].Value" --no-paginate --output text`

            if [ -z "$Cluster_ARN" ]
            then 

            echo "Does Not Exist - Creating One..."

            eksctl create cluster \
            --name phoenix \
            --region us-west-2 \
            --version 1.19 \
            --nodegroup-name phoenix-workers \
            --node-type t2.micro \
            --nodes 2 \
            --nodes-min 1 \
            --nodes-max 2 \


            else 
            echo "Already Exists Your Cluster! Let's Deploy!!!"
            fi


            echo "Change Deployment Version"
            sed -i 's/version/'${CIRCLE_WORKFLOW_ID:0:7}'/g' deploy.yml


            aws eks update-kubeconfig --name phoenix
            kubectl config use-context $Cluster_ARN
            kubectl config current-context
            kubectl apply -f deploy.yml
            kubectl rollout status deployment/phoenix
            kubectl apply -f service.yml

      - run:
          name: TEST APP
          command: |

            kubectl get svc -o wide
            sleep 20
            LoadBalancer=`kubectl get svc phoenix -o jsonpath="{.status.loadBalancer.ingress[*].hostname}"`

            echo ""
            echo $LoadBalancer
            echo ""

            if curl -s ${LoadBalancer}:80 | grep "Udacity DevOps Capstone!"
            then
              echo "Here It is marking completion of DevOps Capstone!"
              echo "Wait! You got to collect evidences!"
            else
              echo "Ah! It ain't here yet! Don't Lose Hope! You Got it!"
            fi

workflows:
  build-push-deploy:
    jobs:
      - lint
      - build-push-docker-image:
          requires: [lint]
      - create-eks-cluster:
          requires: [build-push-docker-image]
      - deploy-application:
          requires: [create-eks-cluster]
